// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  
  // Business account management
  accountType   UserAccountType @default(INDIVIDUAL)
  companyId     String?
  company       Company?        @relation(fields: [companyId], references: [id])
  companyRole   CompanyRole?
  
  // Profile information
  firstName     String?
  lastName      String?
  phone         String?
  jobTitle      String?
  department    String?
  
  // Account status
  isActive      Boolean         @default(true)
  isVerified    Boolean         @default(false)
  lastLoginAt   DateTime?
  
  // KYC/KYB Status
  kycStatus     KYCStatus       @default(NOT_STARTED)
  kybStatus     KYBStatus       @default(NOT_STARTED)
  verificationLevel VerificationLevel @default(BASIC)
  
  // Verification documents
  verificationDocuments VerificationDocument[]
  
  // Password security
  passwordHistory       PasswordHistory[]
  loginAttempts         LoginAttempt[]
  
  // Onboarding
  onboardingStep OnboardingStep  @default(REGISTRATION)
  onboardingCompletedAt DateTime?
  
  // Risk assessment
  riskLevel     RiskLevel       @default(LOW)
  riskScore     Float?
  lastRiskAssessment DateTime?
  
  // Invitations
  invitedBy     String?         // User ID who invited this user
  invitedAt     DateTime?
  acceptedAt    DateTime?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts         Account[]
  sessions         Session[]
  orders           Order[]
  reviews          Review[]
  cart             Cart?
  addresses        Address[]
  wishlistItems    WishlistItem[]
  promotionUsages  PromotionUsage[]
  assignedCoupons  Coupon[]
  customerSegments CustomerSegment[] @relation("CustomerSegmentUsers")
  
  // Company relations
  ownedCompanies   Company[]       @relation("CompanyOwner")
  sentInvitations  UserInvitation[] @relation("InvitationSender")
  receivedInvitations UserInvitation[] @relation("InvitationReceiver")
  
  // KYC/KYB relations
  onboardingSession OnboardingSession?
  
  // Notification relations
  notifications     Notification[]
  notificationPreferences NotificationPreference?
  
  @@index([companyId])
  @@index([email])
  @@index([isActive])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  logo        String?
  website     String?
  isActive    Boolean   @default(true)
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  images      String[]
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  brandId     String?
  brand       Brand?      @relation(fields: [brandId], references: [id])
  stock       Int         @default(0)
  reviews       Review[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  
  // Hierarchical structure
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  
  // SEO and metadata
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  
  // Category settings
  showInMenu      Boolean @default(true)
  showInFooter    Boolean @default(false)
  featuredOrder   Int?    // For featured categories
  
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([name, parentId])
  @@index([parentId])
  @@index([isActive, sortOrder])
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  status          OrderStatus @default(PENDING)
  shippingAddress Address     @relation(fields: [addressId], references: [id])
  addressId       String
  total           Float
  subtotal        Float?      // Subtotal before discounts
  discountAmount  Float?      // Total discount applied
  taxAmount       Float?      // Tax amount
  shippingAmount  Float?      // Shipping cost
  stripePaymentId String?
  appliedPromotions PromotionUsage[]
  
  // Advanced order management
  orderNumber     String      @unique @default(cuid())
  notes           String?     // Internal notes
  customerNotes   String?     // Customer notes
  trackingNumber  String?     // Shipping tracking number
  estimatedDelivery DateTime? // Estimated delivery date
  actualDelivery  DateTime?   // Actual delivery date
  
  // Cancellation
  cancellationReason String?
  cancelledAt        DateTime?
  cancelledBy        String?   // User ID who cancelled
  cancellationNotes  String?
  
  // Returns and Refunds
  returns         OrderReturn[]
  refunds         OrderRefund[]
  
  // Order timeline
  timeline        OrderTimeline[]
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([status])
  @@index([userId])
  @@index([orderNumber])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  orders     Order[]
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model OrderReturn {
  id              String            @id @default(cuid())
  orderId         String
  order           Order             @relation(fields: [orderId], references: [id])
  returnNumber    String            @unique @default(cuid())
  status          OrderReturnStatus @default(REQUESTED)
  reason          String
  description     String?
  images          String[]          // Return item images
  
  // Return items
  items           OrderReturnItem[]
  
  // Approval workflow
  requestedBy     String            // User ID
  requestedAt     DateTime          @default(now())
  reviewedBy      String?           // Admin user ID
  reviewedAt      DateTime?
  reviewNotes     String?
  
  // Shipping
  returnShippingLabel String?       // Return shipping label URL
  trackingNumber      String?       // Return tracking number
  receivedAt          DateTime?     // When return was received
  
  // Refund processing
  refundAmount    Float?
  refundProcessed Boolean           @default(false)
  refundedAt      DateTime?
  
  // Related refunds
  refunds         OrderRefund[]     @relation("OrderRefundToReturn")
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@index([orderId])
  @@index([status])
}

model OrderReturnItem {
  id            String      @id @default(cuid())
  returnId      String
  return        OrderReturn @relation(fields: [returnId], references: [id])
  orderItemId   String
  quantity      Int         // Quantity being returned
  reason        String
  condition     String?     // Condition of returned item
  
  @@unique([returnId, orderItemId])
}

model OrderRefund {
  id              String           @id @default(cuid())
  orderId         String
  order           Order            @relation(fields: [orderId], references: [id])
  refundNumber    String           @unique @default(cuid())
  type            OrderRefundType  @default(PARTIAL)
  status          OrderRefundStatus @default(PENDING)
  
  // Refund details
  amount          Float
  reason          String
  description     String?
  
  // Processing
  processedBy     String?          // Admin user ID
  processedAt     DateTime?
  stripeRefundId  String?          // Stripe refund ID
  
  // Related return (if applicable)
  returnId        String?
  return          OrderReturn?     @relation("OrderRefundToReturn", fields: [returnId], references: [id])
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([orderId])
  @@index([status])
}

model OrderTimeline {
  id          String              @id @default(cuid())
  orderId     String
  order       Order               @relation(fields: [orderId], references: [id])
  event       OrderTimelineEvent
  title       String
  description String?
  metadata    Json?               // Additional event data
  
  // Actor information
  actorType   OrderActorType      @default(SYSTEM)
  actorId     String?             // User ID if human actor
  actorName   String?             // Display name
  
  createdAt   DateTime            @default(now())
  
  @@index([orderId])
  @@index([createdAt])
}

enum OrderReturnStatus {
  REQUESTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  SHIPPED_BACK
  RECEIVED
  PROCESSED
  COMPLETED
}

enum OrderRefundType {
  FULL
  PARTIAL
  SHIPPING_ONLY
  TAX_ONLY
}

enum OrderRefundStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum OrderTimelineEvent {
  ORDER_CREATED
  ORDER_CONFIRMED
  PAYMENT_RECEIVED
  ORDER_PROCESSING
  ORDER_SHIPPED
  ORDER_OUT_FOR_DELIVERY
  ORDER_DELIVERED
  ORDER_CANCELLED
  RETURN_REQUESTED
  RETURN_APPROVED
  RETURN_REJECTED
  RETURN_RECEIVED
  REFUND_INITIATED
  REFUND_COMPLETED
  NOTE_ADDED
  STATUS_CHANGED
}

enum OrderActorType {
  CUSTOMER
  ADMIN
  SYSTEM
  PAYMENT_GATEWAY
  SHIPPING_PROVIDER
}

model Company {
  id              String          @id @default(cuid())
  name            String
  slug            String          @unique
  description     String?
  
  // Company details
  industry        String?
  website         String?
  phone           String?
  email           String?
  
  // Address information
  address         String?
  city            String?
  state           String?
  postalCode      String?
  country         String?
  
  // Business information
  taxId           String?         // Tax identification number
  registrationNumber String?      // Business registration number
  
  // Company settings
  isActive        Boolean         @default(true)
  isVerified      Boolean         @default(false)
  accountType     CompanyAccountType @default(STANDARD)
  
  // Billing and limits
  creditLimit     Float?          // Credit limit for the company
  paymentTerms    Int?            // Payment terms in days
  
  // Owner and users
  ownerId         String
  owner           User            @relation("CompanyOwner", fields: [ownerId], references: [id])
  users           User[]
  
  // Company settings and permissions
  settings        CompanySettings?
  invitations     UserInvitation[]
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@index([slug])
  @@index([ownerId])
  @@index([isActive])
}

model CompanySettings {
  id                    String    @id @default(cuid())
  companyId             String    @unique
  company               Company   @relation(fields: [companyId], references: [id])
  
  // Ordering permissions
  requireApprovalForOrders Boolean @default(false)
  orderApprovalLimit       Float?  // Orders above this amount need approval
  
  // User management
  allowUserInvitations     Boolean @default(true)
  maxUsers                 Int?    // Maximum number of users allowed
  
  // Catalog access
  restrictedCategories     String[] // Category IDs that are restricted
  allowedCategories        String[] // Category IDs that are allowed (if restrictive mode)
  catalogMode              CatalogAccessMode @default(FULL_ACCESS)
  
  // Pricing and discounts
  customPricingEnabled     Boolean @default(false)
  volumeDiscountEnabled    Boolean @default(false)
  
  // Notifications
  notifyOnNewOrders        Boolean @default(true)
  notifyOnLargeOrders      Boolean @default(true)
  largeOrderThreshold      Float?
  
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model VerificationDocument {
  id              String              @id @default(cuid())
  userId          String
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Document details
  type            DocumentType
  category        DocumentCategory    @default(IDENTITY)
  fileName        String
  fileUrl         String
  fileMimeType    String
  fileSize        Int
  
  // Verification status
  status          DocumentStatus      @default(PENDING)
  verifiedAt      DateTime?
  verifiedBy      String?             // Admin user ID
  
  // Document metadata
  documentNumber  String?             // ID number, passport number, etc.
  issuedDate      DateTime?
  expiryDate      DateTime?
  issuingAuthority String?
  
  // Verification notes
  rejectionReason String?
  verificationNotes String?
  
  // Metadata
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@index([userId, type])
  @@index([status])
}

model OnboardingSession {
  id              String              @id @default(cuid())
  userId          String              @unique
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Session data
  currentStep     OnboardingStep      @default(REGISTRATION)
  stepData        Json                // Store step-specific data
  completedSteps  OnboardingStep[]
  
  // Progress tracking
  startedAt       DateTime            @default(now())
  lastActiveAt    DateTime            @default(now())
  completedAt     DateTime?
  
  // Verification attempts
  verificationAttempts Int             @default(0)
  lastVerificationAttempt DateTime?
  
  @@index([currentStep])
}

model Notification {
  id              String              @id @default(cuid())
  userId          String
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Notification content
  title           String
  body            String
  icon            String?
  badge           String?
  image           String?
  data            Json                @default("{}")
  actions         Json                @default("[]")
  
  // Notification settings
  tag             String?
  requireInteraction Boolean          @default(false)
  silent          Boolean             @default(false)
  ttl             Int?                // Time to live in seconds
  
  // Scheduling
  scheduleAt      DateTime?
  expiresAt       DateTime?
  
  // Status tracking
  status          NotificationStatus  @default(PENDING)
  sentAt          DateTime?
  readAt          DateTime?
  clickedAt       DateTime?
  
  // Categorization
  priority        NotificationPriority @default(NORMAL)
  category        String              @default("general")
  
  // Metadata
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@index([userId, readAt])
  @@index([status, scheduleAt])
  @@index([category])
}

model NotificationPreference {
  id              String              @id @default(cuid())
  userId          String              @unique
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Channel preferences
  emailNotifications    Boolean       @default(true)
  pushNotifications     Boolean       @default(true)
  smsNotifications      Boolean       @default(false)
  
  // Content preferences
  orderUpdates          Boolean       @default(true)
  promotionalOffers     Boolean       @default(true)
  priceAlerts           Boolean       @default(false)
  securityAlerts        Boolean       @default(true)
  systemNotifications   Boolean       @default(true)
  
  // Timing preferences
  quietHoursStart       String?       // "22:00"
  quietHoursEnd         String?       // "08:00"
  timezone              String        @default("Asia/Dubai")
  
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model UserInvitation {
  id              String              @id @default(cuid())
  email           String
  companyId       String
  company         Company             @relation(fields: [companyId], references: [id])
  
  // Invitation details
  role            CompanyRole
  invitedBy       String
  inviter         User                @relation("InvitationSender", fields: [invitedBy], references: [id])
  
  // Invitation status
  status          InvitationStatus    @default(PENDING)
  token           String              @unique @default(cuid())
  expiresAt       DateTime
  
  // Acceptance
  acceptedBy      String?
  acceptedUser    User?               @relation("InvitationReceiver", fields: [acceptedBy], references: [id])
  acceptedAt      DateTime?
  
  // Optional message
  message         String?
  
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@unique([email, companyId])
  @@index([token])
  @@index([status])
  @@index([expiresAt])
}

enum UserAccountType {
  INDIVIDUAL
  BUSINESS
}

enum CompanyAccountType {
  STANDARD
  PREMIUM
  ENTERPRISE
}

enum CompanyRole {
  OWNER           // Full access, can manage company and all users
  ADMIN           // Can manage users and company settings, place orders
  MANAGER         // Can place orders, view reports, manage team members
  PURCHASER       // Can place orders within limits
  VIEWER          // Can view products and orders, cannot place orders
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  CANCELLED
}

enum CatalogAccessMode {
  FULL_ACCESS     // Access to all products
  RESTRICTED      // Access only to allowed categories
  BLACKLIST       // Access to all except restricted categories
}

enum Role {
  USER
  ADMIN
}

// KYC/KYB Enums
enum KYCStatus {
  NOT_STARTED
  IN_PROGRESS
  PENDING_REVIEW
  APPROVED
  REJECTED
  EXPIRED
}

enum KYBStatus {
  NOT_STARTED
  IN_PROGRESS
  PENDING_REVIEW
  APPROVED
  REJECTED
  EXPIRED
}

enum VerificationLevel {
  BASIC           // Email verification only
  STANDARD        // Email + Phone + Basic KYC
  ENHANCED        // Full KYC with documents
  PREMIUM         // Full KYB for business accounts
}

enum OnboardingStep {
  REGISTRATION    // Initial account creation
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
  PROFILE_COMPLETION
  DOCUMENT_UPLOAD
  IDENTITY_VERIFICATION
  ADDRESS_VERIFICATION
  BUSINESS_VERIFICATION  // For business accounts
  COMPLIANCE_CHECK
  APPROVAL_PENDING
  COMPLETED
}

enum DocumentType {
  // Individual KYC Documents
  NATIONAL_ID
  PASSPORT
  DRIVING_LICENSE
  UTILITY_BILL
  BANK_STATEMENT
  
  // Business KYB Documents
  BUSINESS_LICENSE
  TAX_CERTIFICATE
  VAT_CERTIFICATE
  MEMORANDUM_OF_ASSOCIATION
  CERTIFICATE_OF_INCORPORATION
  BOARD_RESOLUTION
  AUTHORIZED_SIGNATORY_LIST
  
  // Additional Documents
  PROOF_OF_ADDRESS
  FINANCIAL_STATEMENT
  BANK_LETTER
  OTHER
}

enum DocumentCategory {
  IDENTITY
  ADDRESS
  BUSINESS
  FINANCIAL
  COMPLIANCE
}

enum DocumentStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  EXPIRED
  RESUBMISSION_REQUIRED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum NotificationStatus {
  PENDING
  SCHEDULED
  SENT
  DELIVERED
  FAILED
  CANCELLED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
  RETURN_REQUESTED
  RETURN_APPROVED
  RETURN_REJECTED
  RETURNED
}

enum PromotionType {
  PERCENTAGE
  FIXED_AMOUNT
  BUY_X_GET_Y
  FREE_SHIPPING
  BULK_DISCOUNT
}

enum PromotionTargetType {
  CART_TOTAL
  PRODUCT_CATEGORY
  SPECIFIC_PRODUCT
  CUSTOMER_SEGMENT
  FIRST_ORDER
  BULK_ORDER
}

enum PromotionStatus {
  ACTIVE
  INACTIVE
  SCHEDULED
  EXPIRED
}

model Promotion {
  id               String             @id @default(cuid())
  name             String
  description      String?
  code             String?            @unique // Coupon code (optional)
  type             PromotionType
  targetType       PromotionTargetType
  status           PromotionStatus    @default(ACTIVE)
  
  // Promotion value
  discountValue    Float              // Percentage (0-100) or fixed amount
  maxDiscountAmount Float?            // Maximum discount for percentage promotions
  
  // Conditions
  minimumOrderValue Float?            // Minimum cart value
  maximumOrderValue Float?            // Maximum cart value
  minimumQuantity   Int?              // Minimum quantity of items
  maximumQuantity   Int?              // Maximum quantity of items
  
  // Usage limits
  usageLimit       Int?               // Total usage limit
  usageCount       Int               @default(0)
  usageLimitPerCustomer Int?          // Per customer usage limit
  
  // Date constraints
  startDate        DateTime?
  endDate          DateTime?
  
  // Target constraints
  applicableProducts String[]         // Product IDs (for specific products)
  applicableCategories String[]       // Category IDs (for categories)
  customerSegments String[]           // Customer segments/roles
  excludeProducts  String[]           // Excluded product IDs
  excludeCategories String[]          // Excluded category IDs
  
  // Buy X Get Y specific
  buyQuantity      Int?               // Buy X quantity
  getQuantity      Int?               // Get Y quantity
  getDiscountPercent Float?           // Discount on Y items
  
  // Stackability
  stackable        Boolean           @default(false)
  priority         Int               @default(0)
  
  // Metadata
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  createdBy        String?           // Admin user ID
  
  // Relations
  usages           PromotionUsage[]
  cartRules        CartRule[]
  coupons          Coupon[]
}

model PromotionUsage {
  id           String    @id @default(cuid())
  promotionId  String
  promotion    Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  userId       String?
  user         User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  orderId      String?
  order        Order?    @relation(fields: [orderId], references: [id], onDelete: SetNull)
  discountAmount Float
  usedAt       DateTime  @default(now())
  
  @@index([promotionId, userId])
}

model CartRule {
  id               String             @id @default(cuid())
  name             String
  description      String?
  priority         Int               @default(0)
  active           Boolean           @default(true)
  
  // Conditions (JSON for complex rules)
  conditions       Json              // Store complex condition logic
  
  // Actions
  promotionId      String?
  promotion        Promotion?        @relation(fields: [promotionId], references: [id], onDelete: SetNull)
  
  // Alternative actions (without promotion)
  actionType       String?           // "discount", "free_shipping", "add_product"
  actionValue      Float?
  actionData       Json?             // Additional action data
  
  // Date constraints
  startDate        DateTime?
  endDate          DateTime?
  
  // Usage tracking
  usageCount       Int               @default(0)
  usageLimit       Int?
  
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  createdBy        String?
}

model Banner {
  id           String      @id @default(cuid())
  title        String
  description  String?
  imageUrl     String
  linkUrl      String?
  linkText     String?
  position     BannerPosition @default(HERO)
  isActive     Boolean     @default(true)
  
  // Scheduling
  startDate    DateTime?
  endDate      DateTime?
  
  // Display settings
  displayOrder Int         @default(1)
  
  // Analytics
  clickCount   Int         @default(0)
  impressions  Int         @default(0)
  
  // Metadata
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdBy    String?     // Admin user ID
  
  @@index([position, displayOrder])
  @@index([isActive, startDate, endDate])
}

enum BannerPosition {
  HERO
  SECONDARY
  SIDEBAR
  FOOTER
}

model CustomerSegment {
  id           String   @id @default(cuid())
  name         String
  description  String?
  criteria     Json     // JSON criteria for automatic assignment
  isAutomatic  Boolean  @default(true)
  
  // Manual assignments
  users        User[]   @relation("CustomerSegmentUsers")
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Coupon {
  id               String           @id @default(cuid())
  code             String           @unique
  promotionId      String
  promotion        Promotion        @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  
  // Individual coupon limits
  usageLimit       Int?
  usageCount       Int             @default(0)
  
  // Customer specific
  assignedToUserId String?
  assignedToUser   User?           @relation(fields: [assignedToUserId], references: [id], onDelete: SetNull)
  
  // Date constraints (can override promotion dates)
  startDate        DateTime?
  endDate          DateTime?
  
  active           Boolean         @default(true)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

// Password Security Models
model PasswordHistory {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  passwordHash String
  createdAt    DateTime @default(now())
  
  @@index([userId, createdAt])
}

model LoginAttempt {
  id          String   @id @default(cuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  email       String
  ipAddress   String?
  userAgent   String?
  successful  Boolean  @default(false)
  attemptedAt DateTime @default(now())
  
  @@index([userId, attemptedAt])
  @@index([email, attemptedAt])
  @@index([ipAddress, attemptedAt])
}
